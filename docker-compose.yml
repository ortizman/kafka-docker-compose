---
version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    profiles:
      - datalake
      - all

  broker:
    image: confluentinc/cp-kafka:6.1.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: 192.168.99.100
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1Gb
    profiles:
      - datalake
      - all

  connect:
    image: ortizman/kafka-connect:1.2.0
    hostname: connect
    container_name: connect
    depends_on:
      - broker
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1Gb
    profiles:
      - datalake
      - all

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:6.1.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
      - connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KSQL_OPTS: "-Dconfluent.support.metrics.enable=false"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
    profiles:
      - datalake
      - all

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:6.1.0
    container_name: ksqldb-cli
    depends_on:
      - broker
      - connect
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    profiles:
      - ksqldb-cli
      - all

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment: 
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "broker:29092"
      KAFKA_CLUSTERS_0_NAME: local
    profiles:
      - kafka-ui
      - all

  influxdb:
    image: influxdb:1.8-alpine
    container_name: influxdb
    ports:
      - '8086:8086'
    volumes:
      - influxdb-storage:/var/lib/influxdb
    env_file: 
      - 'warehouse/env.influxdb'
    profiles:
      - warehouse
      - all

  grafana:
    image: grafana/grafana:7.4.3
    container_name: grafana
    ports:
      - '3000:3000'
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./warehouse/grafana-provisioning/:/etc/grafana/provisioning
    depends_on:
      - influxdb
    env_file: 
      - 'warehouse/env.grafana'
    profiles:
      - warehouse
      - all

# PTS
  adaptor-pts:
    image: 193636153916.dkr.ecr.us-east-2.amazonaws.com/pts-full:1.50.23_kafka-dsn
    ports:
      - 8080:8080
      - 9990:9990
    depends_on: 
      - oracle
    environment:
      FE_DB_DRIVER: oracle
      FE_DB_USER: PTS_RELEASE
      FE_DB_PSW: Release2020
      FE_DB_URL: jdbc:oracle:thin:@oracle:1521/XE

      CM_DB_DRIVER: oracle
      CM_DB_USER: PTS_RELEASE
      CM_DB_PSW: Release2020
      CM_DB_URL: jdbc:oracle:thin:@oracle:1521/XE

      SYS_REPO_DB_DRIVER: oracle
      SYS_REPO_DB_URL: jdbc:oracle:thin:@oracle:1521/XE
      SYS_REPO_DB_USER: PTS_RELEASE
      SYS_REPO_DB_PSW: Release2020
    profiles:
      - pts
      - all
  
  oracle:
    container_name: oracle
    image: oracle/database:18.4.0-xe
    ports:
      - 1521:1521
      - 5500:5500
    volumes: 
      - /home/manuel/.new_oradata/:/opt/oracle/oradata
    environment: 
      ORACLE_PWD: Prueba123
      ORACLE_CHARACTERSET: UTF8
    profiles:
      - pts
      - all
    
volumes:
  influxdb-storage:
  chronograf-storage:
  grafana-storage: